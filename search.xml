<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>事件冒泡</title>
      <link href="/2020/01/30/bubbing/"/>
      <url>/2020/01/30/bubbing/</url>
      
        <content type="html"><![CDATA[<h5 id="什么是事件冒泡："><a href="#什么是事件冒泡：" class="headerlink" title="什么是事件冒泡："></a>什么是事件冒泡：</h5><p>当有多个盒子嵌套在一起时，给每个盒子都添加事件（如点击事件），事件会从最里面向最外面执行如下面的例子：</p><p>这是三个相互嵌套的盒子：</p><p><img src="/2020/01/30/bubbing/1.png" alt="三个嵌套的盒子"></p><p>给他们添加三个点击事件：</p><pre><code>      &lt;div id=&quot;div1&quot;&gt;            &lt;div id=&quot;div2&quot; &gt;                &lt;div id=&quot;div3&quot; onclick=&quot;threeFn()&quot;&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;</code></pre><pre><code>var div1 = document.getElementById(&#39;div1&#39;)        div1.onclick = function(){            alert(&quot;你点击了最大的盒子&quot;);        }        var div2 = document.getElementById(&#39;div2&#39;)        div2.addEventListener(&#39;click&#39;,function(){            alert(&#39;你点击了最中间的盒子&#39;);        })        function threeFn(){            alert(&#39;你点击了最小的盒子&#39;);        }</code></pre><p>这时候依次点击这三个盒子时会发现：</p><p>最外面的盒子：<img src="/2020/01/30/bubbing/2.png" alt></p><p>中间的盒子：</p><p><img src="/2020/01/30/bubbing/3.png" alt></p><p><img src="/2020/01/30/bubbing/2.png" alt></p><p>最里面的盒子：</p><p><img src="/2020/01/30/bubbing/4.png" alt></p><p><img src="/2020/01/30/bubbing/3.png" alt></p><p><img src="/2020/01/30/bubbing/2.png" alt></p><p>这就是事件冒泡</p><h5 id="怎么阻止事件冒泡呢"><a href="#怎么阻止事件冒泡呢" class="headerlink" title="怎么阻止事件冒泡呢"></a>怎么阻止事件冒泡呢</h5><p>使用event.stopPropagation( );</p><p>代码如下：</p><pre><code>&lt;div id=&quot;div1&quot;&gt;            &lt;div id=&quot;div2&quot; &gt;                &lt;div id=&quot;div3&quot; onclick=&quot;threeFn(event)&quot;&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;</code></pre><pre><code>var div1 = document.getElementById(&#39;div1&#39;)    div1.onclick = function(event){        alert(&quot;你点击了最大的盒子&quot;);         event.stopPropagation();    }    var div2 = document.getElementById(&#39;div2&#39;)    div2.addEventListener(&#39;click&#39;,function(event){        alert(&#39;你点击了最中间的盒子&#39;);          event.stopPropagation();    })    function threeFn(event){        alert(&#39;你点击了最小的盒子&#39;);          event.stopPropagation();    }</code></pre><p>这时点击任意一个盒子只会触发当前的事件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue路由的理解</title>
      <link href="/2020/01/17/Vue/"/>
      <url>/2020/01/17/Vue/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue-router的原理"><a href="#Vue-router的原理" class="headerlink" title="Vue-router的原理"></a>Vue-router的原理</h4><p>vue-router的原理就是监听URL的地址变化，从而渲染不同的组件。</p><p>vue-router的模式主要有hash模式和history模式</p><p>1，hash 模式的原理(url里带有#号的部分):</p><p>在vue-router.js的2.8版本之前，在路由的hash部分发生了任何变化，<br>    都会执行window.onhaschange方法，在这个方法内部我们可以根据当<br>    前匹配到的hash去加载对应的组件。</p><p>在vue-router.js的2.8版本之后，内部使用window.history.pushState<br>来完成相应的功能。</p><p>hash模式的特点：在切换路由的时候，不会向服务器发送请求，<br>但是当刷新网页的时候，此时会向服务器发送请求，在向服务器发送请求的时候，<br>hash部分的信息是不会发送到服务器的，所以此时刷新网页没有问题</p><p>2，history模式的原理(url中的通过/来表示路径)</p><p>内部使用window.history.pushState来处理url的变化，<br>    切换对应的组件</p><p>history模式的特点：在切换路由的时候，不会向服务器发送请求,<br>    但是当刷新网页的时候，此时会向服务器发送请求，<br>    如果后端没有对应的接口与此匹配，<br>    则会报资源找不到的错误<br>    history模式一般不能刷新网页</p><p>#### </p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于动画demo上传github仓库的方法</title>
      <link href="/2020/01/14/demo/"/>
      <url>/2020/01/14/demo/</url>
      
        <content type="html"><![CDATA[<p>首先登陆github账号并创建一个新的仓库，找到下面的按钮</p><p><img src="/2020/01/14/demo/1.png" alt="创建仓库的按钮"></p><p>点击按钮后，进入到创建仓库的页面，创建仓库名</p><p><img src="/2020/01/14/demo/2.png" alt="仓库名创建栏"></p><p>点击最下面的按钮即创建完成</p><p><img src="/2020/01/14/demo/3.png" alt></p><p>点击刚才创建好的仓库找到ssh的URL 并复制备用</p><p><img src="/2020/01/14/demo/4.png" alt="ssh的URL地址"></p><p>接着就是在本地创建文件并关联这个新创建的仓库了，新建一个文件夹，在文件夹内鼠标右击打开Git Bash命令行</p><p>输入克隆命令（git clone + ssh的url）（创建仓库时复制的ssh的URL），把本地的文件夹除了.git文件之外全部清除</p><p>把要上传的网页放入这个本地文件夹里 依次执行 git add *    git commit -m     git push origin master</p><p><img src="/2020/01/14/demo/5.png" alt></p><p>这样就将本地的网页挂载到GitHub上了</p><p>一些动画demo</p><p>彩虹蜘蛛：&lt;<a href="https://lzs357.github.io/bird/spider/index">https://lzs357.github.io/bird/spider/index</a>&gt;</p><p>C3完成的奔跑的马：&lt;<a href="https://lzs357.github.io/bird/horse/index">https://lzs357.github.io/bird/horse/index</a>&gt;</p><p>Canvas的万花筒：&lt;<a href="https://lzs357.github.io/bird/artascope/index">https://lzs357.github.io/bird/artascope/index</a>&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小外甥</title>
      <link href="/2020/01/12/%E5%B0%8F%E5%A4%96%E7%94%A5/"/>
      <url>/2020/01/12/%E5%B0%8F%E5%A4%96%E7%94%A5/</url>
      
        <content type="html"><![CDATA[<p><img src="/2020/01/12/小外甥/ws.jpg" alt="外甥"></p>]]></content>
      
      
      
        <tags>
            
            <tag> 日常 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第一篇博客</title>
      <link href="/2020/01/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/"/>
      <url>/2020/01/11/%E7%AC%AC%E4%B8%80%E7%AF%87%E5%8D%9A%E5%AE%A2/</url>
      
        <content type="html"><![CDATA[<blockquote><p><strong>web前端学习笔记</strong></p></blockquote><h4 id="HTML标签"><a href="#HTML标签" class="headerlink" title="HTML标签"></a>HTML标签</h4><p>HTML是具有语义化的语言，针对网页的布局，有一类标签代表各种意义的“布局盒子”。所有的布局类标签都主要用来构建页面的内容区域，是双标签类型，是双标签类型，默认显示为块状元素。</p><p>通用的布局标签：<div>。语义：无明确的含义，通常就是代表“盒子”；应用：根据布局的需要，可以使用到任何地方，可以用id和class来对<div>进行定义或区分。</div></div></p><p>HTML5版本新增的常用布局标签：</p><table><thead><tr><th>标签</th><th>语义</th></tr></thead><tbody><tr><td><code>&lt;header&gt;</code></td><td>页面或区域的头部</td></tr><tr><td><code>&lt;footer&gt;</code></td><td>页面或区域的底部</td></tr><tr><td><code>&lt;nav&gt;</code></td><td>导航</td></tr><tr><td><code>&lt;section&gt;</code></td><td>文档中的章节、区段、板块等（类似div，但主要针对文档类区域）</td></tr><tr><td><code>&lt;aside&gt;</code></td><td>侧边栏</td></tr><tr><td><code>&lt;article&gt;</code></td><td>文章/文档</td></tr></tbody></table><p>TML5布局的优势：页面代码更加简单、高效；新布局标签本身具有的语义明确告知浏览器其在页面中的位置和结构意义，增强了对搜索引擎的友好型，提升SEO价值。</p><p>HTML5布局的缺点：老版本的浏览器不支持HTML5这类布局标签，如IE8或更早的版本。从兼容角度出发，目前多数站点扔使用<div>标签构建传统布局。</div></p>]]></content>
      
      
      
        <tags>
            
            <tag> 基本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/09/15/hello-world/"/>
      <url>/2019/09/15/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
