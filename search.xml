<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>vue-music-2</title>
      <link href="/2019/11/23/vue-music-2/"/>
      <url>/2019/11/23/vue-music-2/</url>
      
        <content type="html"><![CDATA[<h5 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h5><p>目前已经完成了歌手，歌单和搜索的页面，比较遗憾的是在歌单详情里不能播放歌单里的歌，因为使用了AntUi里的Tab组件，这个Tab组件会把从接口里拿到的数据自动填充，并且自带分页功能，但是一个缺点是不能在其内部写方法（或许是我不够了解Tab组件），导致拿不到歌曲的id，从而播放不了。歌手，专辑和搜索的歌都是能正常播放的。</p><h5 id="页面的样式（）"><a href="#页面的样式（）" class="headerlink" title="页面的样式（）"></a>页面的样式（）</h5><p>这是首页的轮播图</p><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E8%BD%AE%E6%92%AD%E5%9B%BE.png" alt></p><p>用的是AntUi的轮播图组件，都是些本地图片，总共8张，中间小图片的轮播，用定位定上去的</p><h5 id="轮播图下面的内容："><a href="#轮播图下面的内容：" class="headerlink" title="轮播图下面的内容："></a>轮播图下面的内容：</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E9%A6%96%E9%A1%B5%E5%86%85%E5%AE%B9.png" alt></p><p>当初没怎么构思页面，就写一步看一步了，然后就写了歌单和歌手的两个内容。歌单上面的一些分类是能点击的，</p><p>点击时，让这个分类的值传到接口里。</p><h5 id="接着是点击更多-出现更多歌单的页面："><a href="#接着是点击更多-出现更多歌单的页面：" class="headerlink" title="接着是点击更多 出现更多歌单的页面："></a>接着是点击更多 出现更多歌单的页面：</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%9B%B4%E5%A4%9A%E6%AD%8C%E5%8D%95.png" alt></p><p>这里没有什么难度，就是些布局</p><h5 id="全部按钮的样式"><a href="#全部按钮的样式" class="headerlink" title="全部按钮的样式"></a>全部按钮的样式</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E8%B7%9F%E5%A4%9A%E6%AD%8C%E5%8D%95%E7%9A%84%E5%88%86%E7%B1%BB.png" alt></p><p>这里用到了AntUi 的一个抽屉组件,还有Vue兄弟组件传值的方法，还遇到了一个比较烦的问题:</p><pre><code>歌单的分类词，是全部写在了一个接口里，好在里面给了一个category的属性，比如category=0时，这个接口里的数组就对应着语种这一类，我使用的方法是v-if来条件渲染 写的方法比较繁琐：</code></pre><p><img src="http://q5vmtsp5x.bkt.clouddn.com/code1.png" alt></p><p>把它分成了五个小盒子，等于对应的category就显示，不是则隐藏</p><h5 id="歌单详情"><a href="#歌单详情" class="headerlink" title="歌单详情"></a>歌单详情</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%AD%8C%E5%8D%95%E8%AF%A6%E6%83%85.png" alt></p><p>这个歌单详情的页面放不了歌，只能拿到歌单里的歌，具体原因上面说过了</p><p>这里就是路由传参了，上面几个页面也用到了，就在这说了</p><p>传参：</p><pre><code> godetail(id) {      this.$router.push({        path:&#39;/music/songlist/detail&#39;,        query:{id:id}      })    }  },     </code></pre><p>接参：</p><pre><code>this.$route.query.id</code></pre><h5 id="更多歌手页面"><a href="#更多歌手页面" class="headerlink" title="更多歌手页面"></a>更多歌手页面</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%9B%B4%E5%A4%9A%E6%AD%8C%E6%89%8B.png" alt></p><p>这边也有一个问题（我对数组的几种方法不是很熟悉），</p><p>类似上边歌单分类词的问题，歌手分类的接口 有一个必选参数 cat 即分类  这个cat 的值是数字 比如，华语男歌手 就对应1001，而左边的分类栏是字，两者不一样，我后来自己定义了一个数组类似这样：</p><pre><code> singerclasslist1: [                {                    class: &#39;华语男歌手&#39;,                    id: 1001,                                                                        },                {                    class: &#39;华语女歌手&#39;,                    id: 1002,                     },                {                    class: &#39;华语组合/乐队&#39;,                    id: 1003,                },             ],</code></pre><p>这样就能拿到id来传值，缺点是真的太繁琐了</p><h5 id="歌手详情页面"><a href="#歌手详情页面" class="headerlink" title="歌手详情页面"></a>歌手详情页面</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%AD%8C%E6%89%8B%E8%AF%A6%E6%83%85.png" alt></p><p>这个里面的热门作品是能播放的，专辑和介绍也是有的，MV的页面目前还没写</p><h5 id="专辑详情"><a href="#专辑详情" class="headerlink" title="专辑详情"></a>专辑详情</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%AD%8C%E6%89%8B%E4%B8%93%E8%BE%91%E8%AF%A6%E6%83%85.png" alt></p><p>这是点击所有专辑跳转的页面 歌曲也是能播放的</p><h5 id="搜索页面"><a href="#搜索页面" class="headerlink" title="搜索页面"></a>搜索页面</h5><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E6%90%9C%E7%B4%A2%E9%A1%B5%E9%9D%A2.png" alt></p><p>搜索页面目前只完成了 单曲 歌手 这两栏 这个里面的歌也是能播放的，后面有时间会一一补上</p><h5 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h5><p>这次的Vue项目写了10天，学到了很多Vue的知识，对Vue的认识也更加深刻了一点</p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-music(1)</title>
      <link href="/2019/11/03/vue-music-1/"/>
      <url>/2019/11/03/vue-music-1/</url>
      
        <content type="html"><![CDATA[<h5 id="背景："><a href="#背景：" class="headerlink" title="背景："></a>背景：</h5><p>在学完vue后和几个朋友用vue也做过一个 webapp ,类似于追书神器的那种（<a href="smallant.top:8888" target="_blank" rel="noopener">读了吗</a>）;</p><p>用的是vue-cli 3来创建项目的，用了MUI, axios,vue-router,vuex来写的，我完成了精选页面和搜索的页面和        功能，对接口的理解和跨域的问题不是很熟练，于是我选择了github上开源的<a href="https://binaryify.github.io/NeteaseCloudMusicApi/#/" target="_blank" rel="noopener">网易云api</a>,来做一个网易云的网站，    来掌握。</p><h5 id="起步："><a href="#起步：" class="headerlink" title="起步："></a>起步：</h5><p>用vue create app 来创建项目 ，我这里选择了自动安装（当时图着省事，没选择手动安装），</p><p>用的几个插件 ： vue-router    axios  ;</p><p>ui库 ： Ant-ui</p><p>在main.js文件里 引入 下载的文件</p><p><code>import &#39;ant-design-vue/dist/antd.css&#39;;</code>引入Ant Design Vue样式</p><p><code>import Antd from &#39;ant-design-vue&#39;</code>引入Ant Design Vue组件</p><p><code>Vue.use(Antd)</code>    挂载到vue中新建一个routerwen’j</p><p>路由的配置 ：在src文件夹内新建一个router文件夹，然后在其文件夹里新建index.js文件，在此文件</p><p>内配置路由：<code>import Vue from &#39;vue&#39;</code>  <code>import VueRouter from &#39;vue-router&#39;</code>将此配置写入</p><p><code>Vue.use(VueRouter)</code> Vue全局使用Router。</p><p>还需要再main.js里导出。</p><p>跨域问题的解决：</p><p>这个问题看了好多帖子才解决，方法是 在根目录下新建一个vue.config.js文件</p><p>在其中配置：</p><p><img src="http://q5vmtsp5x.bkt.clouddn.com/1.png" alt="跨域配置"></p><p>请求地址加上/api的前缀</p><h5 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h5><p>刚开始遇到最难的问题就是跨域，后面就是一些比较基础的布局加axios请求，在写更多歌单的页面的时候遇到一个问题；</p><p>请求歌单分类的数据时，拿到的数据直接用v-for遍历的话，不能按照类别来遍历，接口里面给了它们一个category属性好让前台能按条件来渲染，比如category : 1,它对应的就是风格这一类的数据，这时就是要使用</p><p>v-if 来写 <code>v-if=&quot;item.category==2&quot;</code>  这里踩过一个坑 就是v-for 和v-if 不能一起使用 具体内容<a href="https://blog.csdn.net/TurtleOrange/article/details/89518721" target="_blank" rel="noopener">请看</a></p><p><img src="http://q5vmtsp5x.bkt.clouddn.com/2.png" alt="图片1"></p><p>这个是已经解决好的；</p><p>后面就是点击每个小分类来让歌单进行相应的变化，这里用到了兄弟组件的传值 和watch()方法的使用，</p><p>在跟多歌单这个页面 我用了两个组件再把他们引入了进来<img src="http://q5vmtsp5x.bkt.clouddn.com/3.png" alt="图片2"></p><p>allclass 时全部分类的组件， songlists 是歌单的组件</p><p>两者互为兄弟组件</p><p>再请求歌单的接口里有一个<code>cat</code>属性它是控制请求哪一类歌单的，通过中央事件总线来将 <code>allclass组件</code>的值传到 <code>songlists组件里</code>  大致的做法是这样</p><p>由于事件有限比较详细的写法就下次说</p><p>七牛云图片测试：</p><p><img src="http://q5vmtsp5x.bkt.clouddn.com/%E4%B8%80%E6%8B%B3.jpg" alt="图片测试"></p>]]></content>
      
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于Vue路由的理解</title>
      <link href="/2019/10/17/Vue/"/>
      <url>/2019/10/17/Vue/</url>
      
        <content type="html"><![CDATA[<h4 id="Vue-router的原理"><a href="#Vue-router的原理" class="headerlink" title="Vue-router的原理"></a>Vue-router的原理</h4><p>vue-router的原理就是监听URL的地址变化，从而渲染不同的组件。</p><p>vue-router的模式主要有hash模式和history模式</p><p>1，hash 模式的原理(url里带有#号的部分):</p><p>在vue-router.js的2.8版本之前，在路由的hash部分发生了任何变化，<br>    都会执行window.onhaschange方法，在这个方法内部我们可以根据当<br>    前匹配到的hash去加载对应的组件。</p><p>在vue-router.js的2.8版本之后，内部使用window.history.pushState<br>来完成相应的功能。</p><p>hash模式的特点：在切换路由的时候，不会向服务器发送请求，<br>但是当刷新网页的时候，此时会向服务器发送请求，在向服务器发送请求的时候，<br>hash部分的信息是不会发送到服务器的，所以此时刷新网页没有问题</p><p>2，history模式的原理(url中的通过/来表示路径)</p><p>内部使用window.history.pushState来处理url的变化，<br>    切换对应的组件</p><p>history模式的特点：在切换路由的时候，不会向服务器发送请求,<br>    但是当刷新网页的时候，此时会向服务器发送请求，<br>    如果后端没有对应的接口与此匹配，<br>    则会报资源找不到的错误<br>    history模式一般不能刷新网页</p><p>#### </p>]]></content>
      
      
      
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于动画demo上传github仓库的方法</title>
      <link href="/2019/10/14/demo/"/>
      <url>/2019/10/14/demo/</url>
      
        <content type="html"><![CDATA[<p>首先登陆github账号并创建一个新的仓库，找到下面的按钮</p><p><img src="//lzs357.github.io/2019/10/14/demo/1.png" alt="创建仓库的按钮"></p><p>点击按钮后，进入到创建仓库的页面，创建仓库名</p><p><img src="//lzs357.github.io/2019/10/14/demo/2.png" alt="仓库名创建栏"></p><p>点击最下面的按钮即创建完成</p><p><img src="//lzs357.github.io/2019/10/14/demo/3.png" alt></p><p>点击刚才创建好的仓库找到ssh的URL 并复制备用</p><p><img src="//lzs357.github.io/2019/10/14/demo/4.png" alt="ssh的URL地址"></p><p>接着就是在本地创建文件并关联这个新创建的仓库了，新建一个文件夹，在文件夹内鼠标右击打开Git Bash命令行</p><p>输入克隆命令（git clone + ssh的url）（创建仓库时复制的ssh的URL），把本地的文件夹除了.git文件之外全部清除</p><p>把要上传的网页放入这个本地文件夹里 依次执行 git add *    git commit -m     git push origin master</p><p><img src="//lzs357.github.io/2019/10/14/demo/5.png" alt></p><p>这样就将本地的网页挂载到GitHub上了</p><p>一些动画demo</p><p>彩虹蜘蛛：&lt;<a href="https://lzs357.github.io/bird/spider/index">https://lzs357.github.io/bird/spider/index</a>&gt;</p><p>C3完成的奔跑的马：&lt;<a href="https://lzs357.github.io/bird/horse/index">https://lzs357.github.io/bird/horse/index</a>&gt;</p><p>Canvas的万花筒：&lt;<a href="https://lzs357.github.io/bird/artascope/index">https://lzs357.github.io/bird/artascope/index</a>&gt;</p>]]></content>
      
      
      
        <tags>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>事件冒泡</title>
      <link href="/2019/04/22/bubbing/"/>
      <url>/2019/04/22/bubbing/</url>
      
        <content type="html"><![CDATA[<h5 id="什么是事件冒泡："><a href="#什么是事件冒泡：" class="headerlink" title="什么是事件冒泡："></a>什么是事件冒泡：</h5><p>当有多个盒子嵌套在一起时，给每个盒子都添加事件（如点击事件），事件会从最里面向最外面执行如下面的例子：</p><p>这是三个相互嵌套的盒子：</p><p><img src="//lzs357.github.io/2019/04/22/bubbing/1.png" alt="三个嵌套的盒子"></p><p>给他们添加三个点击事件：</p><pre><code>      &lt;div id=&quot;div1&quot;&gt;            &lt;div id=&quot;div2&quot; &gt;                &lt;div id=&quot;div3&quot; onclick=&quot;threeFn()&quot;&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;</code></pre><pre><code>var div1 = document.getElementById(&#39;div1&#39;)        div1.onclick = function(){            alert(&quot;你点击了最大的盒子&quot;);        }        var div2 = document.getElementById(&#39;div2&#39;)        div2.addEventListener(&#39;click&#39;,function(){            alert(&#39;你点击了最中间的盒子&#39;);        })        function threeFn(){            alert(&#39;你点击了最小的盒子&#39;);        }</code></pre><p>这时候依次点击这三个盒子时会发现：</p><p>最外面的盒子：<img src="//lzs357.github.io/2019/04/22/bubbing/2.png" alt></p><p>中间的盒子：</p><p><img src="//lzs357.github.io/2019/04/22/bubbing/3.png" alt></p><p><img src="//lzs357.github.io/2019/04/22/bubbing/2.png" alt></p><p>最里面的盒子：</p><p><img src="//lzs357.github.io/2019/04/22/bubbing/4.png" alt></p><p><img src="//lzs357.github.io/2019/04/22/bubbing/3.png" alt></p><p><img src="//lzs357.github.io/2019/04/22/bubbing/2.png" alt></p><p>这就是事件冒泡</p><h5 id="怎么阻止事件冒泡呢"><a href="#怎么阻止事件冒泡呢" class="headerlink" title="怎么阻止事件冒泡呢"></a>怎么阻止事件冒泡呢</h5><p>使用event.stopPropagation( );</p><p>代码如下：</p><pre><code>&lt;div id=&quot;div1&quot;&gt;            &lt;div id=&quot;div2&quot; &gt;                &lt;div id=&quot;div3&quot; onclick=&quot;threeFn(event)&quot;&gt;                &lt;/div&gt;            &lt;/div&gt;        &lt;/div&gt;</code></pre><pre><code>var div1 = document.getElementById(&#39;div1&#39;)    div1.onclick = function(event){        alert(&quot;你点击了最大的盒子&quot;);         event.stopPropagation();    }    var div2 = document.getElementById(&#39;div2&#39;)    div2.addEventListener(&#39;click&#39;,function(event){        alert(&#39;你点击了最中间的盒子&#39;);          event.stopPropagation();    })    function threeFn(event){        alert(&#39;你点击了最小的盒子&#39;);          event.stopPropagation();    }</code></pre><p>这时点击任意一个盒子只会触发当前的事件。</p>]]></content>
      
      
      
        <tags>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2019/01/11/hello-world/"/>
      <url>/2019/01/11/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class=" language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class=" language-bash"><code class="language-bash">$ hexo server</code></pre><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class=" language-bash"><code class="language-bash">$ hexo generate</code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class=" language-bash"><code class="language-bash">$ hexo deploy</code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
